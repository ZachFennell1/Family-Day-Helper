// Generated by HLC 4.2.4 (HL v4)
#ifndef INC_h3d__mat__Material
#define INC_h3d__mat__Material
typedef struct _h3d__mat__$Material *h3d__mat__$Material;
typedef struct _h3d__mat__Material *h3d__mat__Material;
#include <hl/Class.h>
#include <hl/BaseType.h>
#include <_std/String.h>
#include <h3d/mat/Texture.h>
#include <h3d/mat/BaseMaterial.h>
#include <hxd/impl/AnyProps.h>
#include <h3d/mat/Pass.h>
#include <h3d/shader/BaseMesh.h>
#include <h3d/shader/NormalMap.h>
#include <hxd/res/Resource.h>
#include <h3d/shader/Texture.h>
#include <h3d/shader/SpecularTexture.h>
#include <h2d/BlendMode.h>


struct _h3d__mat__$Material {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	vclosure* create;
};
struct _h3d__mat__Material {
	hl_type *$type;
	vdynamic* props;
	h3d__mat__Pass passes;
	String name;
	vvirtual* f$3;
	h3d__shader__BaseMesh mshader;
	h3d__shader__NormalMap normalShader;
	hxd__res__Resource model;
	bool castShadows;
	bool receiveShadows;
	bool staticShadows;
	h3d__shader__Texture textureShader;
	h3d__shader__SpecularTexture specularShader;
	venum* blendMode;
};
#endif

