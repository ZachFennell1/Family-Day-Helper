// Generated by HLC 4.2.4 (HL v4)
#ifndef INC_hxd__Key
#define INC_hxd__Key
typedef struct _hxd__$Key *hxd__$Key;
typedef struct _hxd__Key *hxd__Key;
#include <hl/Class.h>
#include <hl/BaseType.h>
#include <_std/String.h>
#include <hl/types/ArrayBytes_Int.h>
#include <hxd/Event.h>


struct _hxd__$Key {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	int BACKSPACE;
	int TAB;
	int ENTER;
	int SHIFT;
	int CTRL;
	int ALT;
	int ESCAPE;
	int SPACE;
	int PGUP;
	int PGDOWN;
	int END;
	int HOME;
	int LEFT;
	int UP;
	int RIGHT;
	int DOWN;
	int INSERT;
	int DELETE;
	int QWERTY_EQUALS;
	int QWERTY_MINUS;
	int QWERTY_TILDE;
	int QWERTY_BRACKET_LEFT;
	int QWERTY_BRACKET_RIGHT;
	int QWERTY_SEMICOLON;
	int QWERTY_QUOTE;
	int QWERTY_BACKSLASH;
	int QWERTY_COMMA;
	int QWERTY_PERIOD;
	int QWERTY_SLASH;
	int INTL_BACKSLASH;
	int LEFT_WINDOW_KEY;
	int RIGHT_WINDOW_KEY;
	int CONTEXT_MENU;
	int PAUSE_BREAK;
	int CAPS_LOCK;
	int NUM_LOCK;
	int SCROLL_LOCK;
	int NUMBER_0;
	int NUMBER_1;
	int NUMBER_2;
	int NUMBER_3;
	int NUMBER_4;
	int NUMBER_5;
	int NUMBER_6;
	int NUMBER_7;
	int NUMBER_8;
	int NUMBER_9;
	int NUMPAD_0;
	int NUMPAD_1;
	int NUMPAD_2;
	int NUMPAD_3;
	int NUMPAD_4;
	int NUMPAD_5;
	int NUMPAD_6;
	int NUMPAD_7;
	int NUMPAD_8;
	int NUMPAD_9;
	int A;
	int B;
	int C;
	int D;
	int E;
	int F;
	int G;
	int H;
	int I;
	int J;
	int K;
	int L;
	int M;
	int N;
	int O;
	int P;
	int Q;
	int R;
	int S;
	int T;
	int U;
	int V;
	int W;
	int X;
	int Y;
	int Z;
	int F1;
	int F2;
	int F3;
	int F4;
	int F5;
	int F6;
	int F7;
	int F8;
	int F9;
	int F10;
	int F11;
	int F12;
	int F13;
	int F14;
	int F15;
	int F16;
	int F17;
	int F18;
	int F19;
	int F20;
	int F21;
	int F22;
	int F23;
	int F24;
	int NUMPAD_MULT;
	int NUMPAD_ADD;
	int NUMPAD_ENTER;
	int NUMPAD_SUB;
	int NUMPAD_DOT;
	int NUMPAD_DIV;
	int MOUSE_LEFT;
	int MOUSE_RIGHT;
	int MOUSE_MIDDLE;
	int MOUSE_BACK;
	int MOUSE_FORWARD;
	int MOUSE_WHEEL_UP;
	int MOUSE_WHEEL_DOWN;
	int LOC_LEFT;
	int LOC_RIGHT;
	int LSHIFT;
	int RSHIFT;
	int LCTRL;
	int RCTRL;
	int LALT;
	int RALT;
	bool initDone;
	hl__types__ArrayBytes_Int keyPressed;
	bool ALLOW_KEY_REPEAT;
	vclosure* isDown;
	vclosure* getFrame;
	vclosure* isPressed;
	vclosure* isReleased;
	vclosure* initialize;
	vclosure* dispose;
	vclosure* onEvent;
	vclosure* getKeyName;
};
struct _hxd__Key {
	hl_type *$type;
};
#endif

